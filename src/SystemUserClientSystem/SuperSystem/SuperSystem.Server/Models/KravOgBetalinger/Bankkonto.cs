/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilh√∏rende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Bankkonto
    /// </summary>
    [DataContract]
        public partial class Bankkonto :  IEquatable<Bankkonto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bankkonto" /> class.
        /// </summary>
        /// <param name="bankinformasjon">bankinformasjon.</param>
        /// <param name="kontoeiersNavn">kontoeiersNavn.</param>
        /// <param name="kontonummer">kontonummer.</param>
        /// <param name="iban">iban.</param>
        /// <param name="swiftBIC">swiftBIC.</param>
        public Bankkonto(string bankinformasjon = default(string), string kontoeiersNavn = default(string), string kontonummer = default(string), string iban = default(string), string swiftBIC = default(string))
        {
            this.Bankinformasjon = bankinformasjon;
            this.KontoeiersNavn = kontoeiersNavn;
            this.Kontonummer = kontonummer;
            this.Iban = iban;
            this.SwiftBIC = swiftBIC;
        }
        
        /// <summary>
        /// Gets or Sets Bankinformasjon
        /// </summary>
        [DataMember(Name="bankinformasjon", EmitDefaultValue=false)]
        public string Bankinformasjon { get; set; }

        /// <summary>
        /// Gets or Sets KontoeiersNavn
        /// </summary>
        [DataMember(Name="kontoeiersNavn", EmitDefaultValue=false)]
        public string KontoeiersNavn { get; set; }

        /// <summary>
        /// Gets or Sets Kontonummer
        /// </summary>
        [DataMember(Name="kontonummer", EmitDefaultValue=false)]
        public string Kontonummer { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name="iban", EmitDefaultValue=false)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets SwiftBIC
        /// </summary>
        [DataMember(Name="swiftBIC", EmitDefaultValue=false)]
        public string SwiftBIC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bankkonto {\n");
            sb.Append("  Bankinformasjon: ").Append(Bankinformasjon).Append("\n");
            sb.Append("  KontoeiersNavn: ").Append(KontoeiersNavn).Append("\n");
            sb.Append("  Kontonummer: ").Append(Kontonummer).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  SwiftBIC: ").Append(SwiftBIC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bankkonto);
        }

        /// <summary>
        /// Returns true if Bankkonto instances are equal
        /// </summary>
        /// <param name="input">Instance of Bankkonto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bankkonto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bankinformasjon == input.Bankinformasjon ||
                    (this.Bankinformasjon != null &&
                    this.Bankinformasjon.Equals(input.Bankinformasjon))
                ) && 
                (
                    this.KontoeiersNavn == input.KontoeiersNavn ||
                    (this.KontoeiersNavn != null &&
                    this.KontoeiersNavn.Equals(input.KontoeiersNavn))
                ) && 
                (
                    this.Kontonummer == input.Kontonummer ||
                    (this.Kontonummer != null &&
                    this.Kontonummer.Equals(input.Kontonummer))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.SwiftBIC == input.SwiftBIC ||
                    (this.SwiftBIC != null &&
                    this.SwiftBIC.Equals(input.SwiftBIC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bankinformasjon != null)
                    hashCode = hashCode * 59 + this.Bankinformasjon.GetHashCode();
                if (this.KontoeiersNavn != null)
                    hashCode = hashCode * 59 + this.KontoeiersNavn.GetHashCode();
                if (this.Kontonummer != null)
                    hashCode = hashCode * 59 + this.Kontonummer.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.SwiftBIC != null)
                    hashCode = hashCode * 59 + this.SwiftBIC.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
