/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilh√∏rende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Betalingsinformasjon
    /// </summary>
    [DataContract]
        public partial class Betalingsinformasjon :  IEquatable<Betalingsinformasjon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Betalingsinformasjon" /> class.
        /// </summary>
        /// <param name="kidnummer">kidnummer.</param>
        /// <param name="meldingSendtTilMottaker">meldingSendtTilMottaker.</param>
        /// <param name="konto">konto.</param>
        /// <param name="sjekkSendtTil">sjekkSendtTil.</param>
        /// <param name="utbetalingskortSendtTil">utbetalingskortSendtTil.</param>
        /// <param name="valutakode">valutakode.</param>
        public Betalingsinformasjon(string kidnummer = default(string), string meldingSendtTilMottaker = default(string), Bankkonto konto = default(Bankkonto), Mottaker sjekkSendtTil = default(Mottaker), Mottaker utbetalingskortSendtTil = default(Mottaker), string valutakode = default(string))
        {
            this.Kidnummer = kidnummer;
            this.MeldingSendtTilMottaker = meldingSendtTilMottaker;
            this.Konto = konto;
            this.SjekkSendtTil = sjekkSendtTil;
            this.UtbetalingskortSendtTil = utbetalingskortSendtTil;
            this.Valutakode = valutakode;
        }
        
        /// <summary>
        /// Gets or Sets Kidnummer
        /// </summary>
        [DataMember(Name="kidnummer", EmitDefaultValue=false)]
        public string Kidnummer { get; set; }

        /// <summary>
        /// Gets or Sets MeldingSendtTilMottaker
        /// </summary>
        [DataMember(Name="meldingSendtTilMottaker", EmitDefaultValue=false)]
        public string MeldingSendtTilMottaker { get; set; }

        /// <summary>
        /// Gets or Sets Konto
        /// </summary>
        [DataMember(Name="konto", EmitDefaultValue=false)]
        public Bankkonto Konto { get; set; }

        /// <summary>
        /// Gets or Sets SjekkSendtTil
        /// </summary>
        [DataMember(Name="sjekkSendtTil", EmitDefaultValue=false)]
        public Mottaker SjekkSendtTil { get; set; }

        /// <summary>
        /// Gets or Sets UtbetalingskortSendtTil
        /// </summary>
        [DataMember(Name="utbetalingskortSendtTil", EmitDefaultValue=false)]
        public Mottaker UtbetalingskortSendtTil { get; set; }

        /// <summary>
        /// Gets or Sets Valutakode
        /// </summary>
        [DataMember(Name="valutakode", EmitDefaultValue=false)]
        public string Valutakode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Betalingsinformasjon {\n");
            sb.Append("  Kidnummer: ").Append(Kidnummer).Append("\n");
            sb.Append("  MeldingSendtTilMottaker: ").Append(MeldingSendtTilMottaker).Append("\n");
            sb.Append("  Konto: ").Append(Konto).Append("\n");
            sb.Append("  SjekkSendtTil: ").Append(SjekkSendtTil).Append("\n");
            sb.Append("  UtbetalingskortSendtTil: ").Append(UtbetalingskortSendtTil).Append("\n");
            sb.Append("  Valutakode: ").Append(Valutakode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Betalingsinformasjon);
        }

        /// <summary>
        /// Returns true if Betalingsinformasjon instances are equal
        /// </summary>
        /// <param name="input">Instance of Betalingsinformasjon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Betalingsinformasjon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Kidnummer == input.Kidnummer ||
                    (this.Kidnummer != null &&
                    this.Kidnummer.Equals(input.Kidnummer))
                ) && 
                (
                    this.MeldingSendtTilMottaker == input.MeldingSendtTilMottaker ||
                    (this.MeldingSendtTilMottaker != null &&
                    this.MeldingSendtTilMottaker.Equals(input.MeldingSendtTilMottaker))
                ) && 
                (
                    this.Konto == input.Konto ||
                    (this.Konto != null &&
                    this.Konto.Equals(input.Konto))
                ) && 
                (
                    this.SjekkSendtTil == input.SjekkSendtTil ||
                    (this.SjekkSendtTil != null &&
                    this.SjekkSendtTil.Equals(input.SjekkSendtTil))
                ) && 
                (
                    this.UtbetalingskortSendtTil == input.UtbetalingskortSendtTil ||
                    (this.UtbetalingskortSendtTil != null &&
                    this.UtbetalingskortSendtTil.Equals(input.UtbetalingskortSendtTil))
                ) && 
                (
                    this.Valutakode == input.Valutakode ||
                    (this.Valutakode != null &&
                    this.Valutakode.Equals(input.Valutakode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kidnummer != null)
                    hashCode = hashCode * 59 + this.Kidnummer.GetHashCode();
                if (this.MeldingSendtTilMottaker != null)
                    hashCode = hashCode * 59 + this.MeldingSendtTilMottaker.GetHashCode();
                if (this.Konto != null)
                    hashCode = hashCode * 59 + this.Konto.GetHashCode();
                if (this.SjekkSendtTil != null)
                    hashCode = hashCode * 59 + this.SjekkSendtTil.GetHashCode();
                if (this.UtbetalingskortSendtTil != null)
                    hashCode = hashCode * 59 + this.UtbetalingskortSendtTil.GetHashCode();
                if (this.Valutakode != null)
                    hashCode = hashCode * 59 + this.Valutakode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
