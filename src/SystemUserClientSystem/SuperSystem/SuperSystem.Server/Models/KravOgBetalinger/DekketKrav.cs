/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilh√∏rende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// kravet som blir dekket i motregningen; beskrivelse av dekket krav slik at det ser ut i disponeringsbrev; dekket krav her er ofte referert som motkrav i fagdomene.
    /// </summary>
    [DataContract]
        public partial class DekketKrav :  IEquatable<DekketKrav>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DekketKrav" /> class.
        /// </summary>
        /// <param name="motregnetBeloep">motregnetBeloep (required).</param>
        /// <param name="dekketKravBeskrivelse">dekketKravBeskrivelse (required).</param>
        /// <param name="innkrevingsmyndighet">innkrevingsmyndighet (required).</param>
        /// <param name="forfallsdato">forfallsdato (required).</param>
        /// <param name="kreditorsnavn">kreditorsnavn (required).</param>
        /// <param name="forsinkelsesrenter">forsinkelsesrenter (required).</param>
        public DekketKrav(double? motregnetBeloep = default(double?), MultiSpraakTekst dekketKravBeskrivelse = default(MultiSpraakTekst), MultiSpraakTekst innkrevingsmyndighet = default(MultiSpraakTekst), DateTime? forfallsdato = default(DateTime?), MultiSpraakTekst kreditorsnavn = default(MultiSpraakTekst), double? forsinkelsesrenter = default(double?))
        {
            // to ensure "motregnetBeloep" is required (not null)
            if (motregnetBeloep == null)
            {
                throw new InvalidDataException("motregnetBeloep is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.MotregnetBeloep = motregnetBeloep;
            }
            // to ensure "dekketKravBeskrivelse" is required (not null)
            if (dekketKravBeskrivelse == null)
            {
                throw new InvalidDataException("dekketKravBeskrivelse is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.DekketKravBeskrivelse = dekketKravBeskrivelse;
            }
            // to ensure "innkrevingsmyndighet" is required (not null)
            if (innkrevingsmyndighet == null)
            {
                throw new InvalidDataException("innkrevingsmyndighet is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.Innkrevingsmyndighet = innkrevingsmyndighet;
            }
            // to ensure "forfallsdato" is required (not null)
            if (forfallsdato == null)
            {
                throw new InvalidDataException("forfallsdato is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.Forfallsdato = forfallsdato;
            }
            // to ensure "kreditorsnavn" is required (not null)
            if (kreditorsnavn == null)
            {
                throw new InvalidDataException("kreditorsnavn is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.Kreditorsnavn = kreditorsnavn;
            }
            // to ensure "forsinkelsesrenter" is required (not null)
            if (forsinkelsesrenter == null)
            {
                throw new InvalidDataException("forsinkelsesrenter is a required property for DekketKrav and cannot be null");
            }
            else
            {
                this.Forsinkelsesrenter = forsinkelsesrenter;
            }
        }
        
        /// <summary>
        /// Gets or Sets MotregnetBeloep
        /// </summary>
        [DataMember(Name="motregnetBeloep", EmitDefaultValue=false)]
        public double? MotregnetBeloep { get; set; }

        /// <summary>
        /// Gets or Sets DekketKravBeskrivelse
        /// </summary>
        [DataMember(Name="dekketKravBeskrivelse", EmitDefaultValue=false)]
        public MultiSpraakTekst DekketKravBeskrivelse { get; set; }

        /// <summary>
        /// Gets or Sets Innkrevingsmyndighet
        /// </summary>
        [DataMember(Name="innkrevingsmyndighet", EmitDefaultValue=false)]
        public MultiSpraakTekst Innkrevingsmyndighet { get; set; }

        /// <summary>
        /// Gets or Sets Forfallsdato
        /// </summary>
        [DataMember(Name="forfallsdato", EmitDefaultValue=false)]
        public DateTime? Forfallsdato { get; set; }

        /// <summary>
        /// Gets or Sets Kreditorsnavn
        /// </summary>
        [DataMember(Name="kreditorsnavn", EmitDefaultValue=false)]
        public MultiSpraakTekst Kreditorsnavn { get; set; }

        /// <summary>
        /// Gets or Sets Forsinkelsesrenter
        /// </summary>
        [DataMember(Name="forsinkelsesrenter", EmitDefaultValue=false)]
        public double? Forsinkelsesrenter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DekketKrav {\n");
            sb.Append("  MotregnetBeloep: ").Append(MotregnetBeloep).Append("\n");
            sb.Append("  DekketKravBeskrivelse: ").Append(DekketKravBeskrivelse).Append("\n");
            sb.Append("  Innkrevingsmyndighet: ").Append(Innkrevingsmyndighet).Append("\n");
            sb.Append("  Forfallsdato: ").Append(Forfallsdato).Append("\n");
            sb.Append("  Kreditorsnavn: ").Append(Kreditorsnavn).Append("\n");
            sb.Append("  Forsinkelsesrenter: ").Append(Forsinkelsesrenter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DekketKrav);
        }

        /// <summary>
        /// Returns true if DekketKrav instances are equal
        /// </summary>
        /// <param name="input">Instance of DekketKrav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DekketKrav input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MotregnetBeloep == input.MotregnetBeloep ||
                    (this.MotregnetBeloep != null &&
                    this.MotregnetBeloep.Equals(input.MotregnetBeloep))
                ) && 
                (
                    this.DekketKravBeskrivelse == input.DekketKravBeskrivelse ||
                    (this.DekketKravBeskrivelse != null &&
                    this.DekketKravBeskrivelse.Equals(input.DekketKravBeskrivelse))
                ) && 
                (
                    this.Innkrevingsmyndighet == input.Innkrevingsmyndighet ||
                    (this.Innkrevingsmyndighet != null &&
                    this.Innkrevingsmyndighet.Equals(input.Innkrevingsmyndighet))
                ) && 
                (
                    this.Forfallsdato == input.Forfallsdato ||
                    (this.Forfallsdato != null &&
                    this.Forfallsdato.Equals(input.Forfallsdato))
                ) && 
                (
                    this.Kreditorsnavn == input.Kreditorsnavn ||
                    (this.Kreditorsnavn != null &&
                    this.Kreditorsnavn.Equals(input.Kreditorsnavn))
                ) && 
                (
                    this.Forsinkelsesrenter == input.Forsinkelsesrenter ||
                    (this.Forsinkelsesrenter != null &&
                    this.Forsinkelsesrenter.Equals(input.Forsinkelsesrenter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MotregnetBeloep != null)
                    hashCode = hashCode * 59 + this.MotregnetBeloep.GetHashCode();
                if (this.DekketKravBeskrivelse != null)
                    hashCode = hashCode * 59 + this.DekketKravBeskrivelse.GetHashCode();
                if (this.Innkrevingsmyndighet != null)
                    hashCode = hashCode * 59 + this.Innkrevingsmyndighet.GetHashCode();
                if (this.Forfallsdato != null)
                    hashCode = hashCode * 59 + this.Forfallsdato.GetHashCode();
                if (this.Kreditorsnavn != null)
                    hashCode = hashCode * 59 + this.Kreditorsnavn.GetHashCode();
                if (this.Forsinkelsesrenter != null)
                    hashCode = hashCode * 59 + this.Forsinkelsesrenter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
