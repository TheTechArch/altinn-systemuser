/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilhørende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// oversikt over krav med gjenstående beløp (åpne krav) og eventuelle uplasserte innbetalinger.
    /// </summary>
    [DataContract]
        public partial class AapneKrav :  IEquatable<AapneKrav>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AapneKrav" /> class.
        /// </summary>
        /// <param name="partIdentifikator">partIdentifikator (required).</param>
        /// <param name="aapentKravMedGjenstaaendeBeloep">Vanligvis en debettransaksjon i reskontro, som kjennetegnes av at den skal betales av en debitor. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c63129-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;).</param>
        /// <param name="innbetalingMedUplassertBeloep">overføring av penger til kreditor eller kreditors representant. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c6311e-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;).</param>
        /// <param name="totalOversikt">totalOversikt.</param>
        /// <param name="oversiktPerKravgruppe">oversikt over saldo, stipulerte renter og krav (forfallte og ikke forfalte) gruppert per kravgrupe ved forespørsels tidspunkt.</param>
        /// <param name="skjermet">skjermet (required).</param>
        public AapneKrav(string partIdentifikator = default(string), List<Krav> aapentKravMedGjenstaaendeBeloep = default(List<Krav>), List<Innbetaling> innbetalingMedUplassertBeloep = default(List<Innbetaling>), TotalOversikt totalOversikt = default(TotalOversikt), List<OversiktPerKravgruppe> oversiktPerKravgruppe = default(List<OversiktPerKravgruppe>), bool? skjermet = default(bool?))
        {
            // to ensure "partIdentifikator" is required (not null)
            if (partIdentifikator == null)
            {
                throw new InvalidDataException("partIdentifikator is a required property for AapneKrav and cannot be null");
            }
            else
            {
                this.PartIdentifikator = partIdentifikator;
            }
            // to ensure "skjermet" is required (not null)
            if (skjermet == null)
            {
                throw new InvalidDataException("skjermet is a required property for AapneKrav and cannot be null");
            }
            else
            {
                this.Skjermet = skjermet;
            }
            this.AapentKravMedGjenstaaendeBeloep = aapentKravMedGjenstaaendeBeloep;
            this.InnbetalingMedUplassertBeloep = innbetalingMedUplassertBeloep;
            this.TotalOversikt = totalOversikt;
            this.OversiktPerKravgruppe = oversiktPerKravgruppe;
        }
        
        /// <summary>
        /// Gets or Sets PartIdentifikator
        /// </summary>
        [DataMember(Name="partIdentifikator", EmitDefaultValue=false)]
        public string PartIdentifikator { get; set; }

        /// <summary>
        /// Vanligvis en debettransaksjon i reskontro, som kjennetegnes av at den skal betales av en debitor. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c63129-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;)
        /// </summary>
        /// <value>Vanligvis en debettransaksjon i reskontro, som kjennetegnes av at den skal betales av en debitor. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c63129-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;)</value>
        [DataMember(Name="aapentKravMedGjenstaaendeBeloep", EmitDefaultValue=false)]
        public List<Krav> AapentKravMedGjenstaaendeBeloep { get; set; }

        /// <summary>
        /// overføring av penger til kreditor eller kreditors representant. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c6311e-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;)
        /// </summary>
        /// <value>overføring av penger til kreditor eller kreditors representant. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c6311e-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;)</value>
        [DataMember(Name="innbetalingMedUplassertBeloep", EmitDefaultValue=false)]
        public List<Innbetaling> InnbetalingMedUplassertBeloep { get; set; }

        /// <summary>
        /// Gets or Sets TotalOversikt
        /// </summary>
        [DataMember(Name="totalOversikt", EmitDefaultValue=false)]
        public TotalOversikt TotalOversikt { get; set; }

        /// <summary>
        /// oversikt over saldo, stipulerte renter og krav (forfallte og ikke forfalte) gruppert per kravgrupe ved forespørsels tidspunkt
        /// </summary>
        /// <value>oversikt over saldo, stipulerte renter og krav (forfallte og ikke forfalte) gruppert per kravgrupe ved forespørsels tidspunkt</value>
        [DataMember(Name="oversiktPerKravgruppe", EmitDefaultValue=false)]
        public List<OversiktPerKravgruppe> OversiktPerKravgruppe { get; set; }

        /// <summary>
        /// Gets or Sets Skjermet
        /// </summary>
        [DataMember(Name="skjermet", EmitDefaultValue=false)]
        public bool? Skjermet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AapneKrav {\n");
            sb.Append("  PartIdentifikator: ").Append(PartIdentifikator).Append("\n");
            sb.Append("  AapentKravMedGjenstaaendeBeloep: ").Append(AapentKravMedGjenstaaendeBeloep).Append("\n");
            sb.Append("  InnbetalingMedUplassertBeloep: ").Append(InnbetalingMedUplassertBeloep).Append("\n");
            sb.Append("  TotalOversikt: ").Append(TotalOversikt).Append("\n");
            sb.Append("  OversiktPerKravgruppe: ").Append(OversiktPerKravgruppe).Append("\n");
            sb.Append("  Skjermet: ").Append(Skjermet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AapneKrav);
        }

        /// <summary>
        /// Returns true if AapneKrav instances are equal
        /// </summary>
        /// <param name="input">Instance of AapneKrav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AapneKrav input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartIdentifikator == input.PartIdentifikator ||
                    (this.PartIdentifikator != null &&
                    this.PartIdentifikator.Equals(input.PartIdentifikator))
                ) && 
                (
                    this.AapentKravMedGjenstaaendeBeloep == input.AapentKravMedGjenstaaendeBeloep ||
                    this.AapentKravMedGjenstaaendeBeloep != null &&
                    input.AapentKravMedGjenstaaendeBeloep != null &&
                    this.AapentKravMedGjenstaaendeBeloep.SequenceEqual(input.AapentKravMedGjenstaaendeBeloep)
                ) && 
                (
                    this.InnbetalingMedUplassertBeloep == input.InnbetalingMedUplassertBeloep ||
                    this.InnbetalingMedUplassertBeloep != null &&
                    input.InnbetalingMedUplassertBeloep != null &&
                    this.InnbetalingMedUplassertBeloep.SequenceEqual(input.InnbetalingMedUplassertBeloep)
                ) && 
                (
                    this.TotalOversikt == input.TotalOversikt ||
                    (this.TotalOversikt != null &&
                    this.TotalOversikt.Equals(input.TotalOversikt))
                ) && 
                (
                    this.OversiktPerKravgruppe == input.OversiktPerKravgruppe ||
                    this.OversiktPerKravgruppe != null &&
                    input.OversiktPerKravgruppe != null &&
                    this.OversiktPerKravgruppe.SequenceEqual(input.OversiktPerKravgruppe)
                ) && 
                (
                    this.Skjermet == input.Skjermet ||
                    (this.Skjermet != null &&
                    this.Skjermet.Equals(input.Skjermet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartIdentifikator != null)
                    hashCode = hashCode * 59 + this.PartIdentifikator.GetHashCode();
                if (this.AapentKravMedGjenstaaendeBeloep != null)
                    hashCode = hashCode * 59 + this.AapentKravMedGjenstaaendeBeloep.GetHashCode();
                if (this.InnbetalingMedUplassertBeloep != null)
                    hashCode = hashCode * 59 + this.InnbetalingMedUplassertBeloep.GetHashCode();
                if (this.TotalOversikt != null)
                    hashCode = hashCode * 59 + this.TotalOversikt.GetHashCode();
                if (this.OversiktPerKravgruppe != null)
                    hashCode = hashCode * 59 + this.OversiktPerKravgruppe.GetHashCode();
                if (this.Skjermet != null)
                    hashCode = hashCode * 59 + this.Skjermet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
