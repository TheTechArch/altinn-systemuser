/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilh√∏rende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Mottaker
    /// </summary>
    [DataContract]
        public partial class Mottaker :  IEquatable<Mottaker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mottaker" /> class.
        /// </summary>
        /// <param name="mottakersNavn">mottakersNavn (required).</param>
        /// <param name="mottakersAddresse">mottakersAddresse (required).</param>
        public Mottaker(string mottakersNavn = default(string), AdresseFrittFormat mottakersAddresse = default(AdresseFrittFormat))
        {
            // to ensure "mottakersNavn" is required (not null)
            if (mottakersNavn == null)
            {
                throw new InvalidDataException("mottakersNavn is a required property for Mottaker and cannot be null");
            }
            else
            {
                this.MottakersNavn = mottakersNavn;
            }
            // to ensure "mottakersAddresse" is required (not null)
            if (mottakersAddresse == null)
            {
                throw new InvalidDataException("mottakersAddresse is a required property for Mottaker and cannot be null");
            }
            else
            {
                this.MottakersAddresse = mottakersAddresse;
            }
        }
        
        /// <summary>
        /// Gets or Sets MottakersNavn
        /// </summary>
        [DataMember(Name="mottakersNavn", EmitDefaultValue=false)]
        public string MottakersNavn { get; set; }

        /// <summary>
        /// Gets or Sets MottakersAddresse
        /// </summary>
        [DataMember(Name="mottakersAddresse", EmitDefaultValue=false)]
        public AdresseFrittFormat MottakersAddresse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mottaker {\n");
            sb.Append("  MottakersNavn: ").Append(MottakersNavn).Append("\n");
            sb.Append("  MottakersAddresse: ").Append(MottakersAddresse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mottaker);
        }

        /// <summary>
        /// Returns true if Mottaker instances are equal
        /// </summary>
        /// <param name="input">Instance of Mottaker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mottaker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MottakersNavn == input.MottakersNavn ||
                    (this.MottakersNavn != null &&
                    this.MottakersNavn.Equals(input.MottakersNavn))
                ) && 
                (
                    this.MottakersAddresse == input.MottakersAddresse ||
                    (this.MottakersAddresse != null &&
                    this.MottakersAddresse.Equals(input.MottakersAddresse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MottakersNavn != null)
                    hashCode = hashCode * 59 + this.MottakersNavn.GetHashCode();
                if (this.MottakersAddresse != null)
                    hashCode = hashCode * 59 + this.MottakersAddresse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
