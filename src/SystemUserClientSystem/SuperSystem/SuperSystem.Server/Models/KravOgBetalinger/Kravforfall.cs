/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilhørende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// forfall, forfallsdag eller forfallstid er det tidspunkt da en fordring kan kreves oppfylt (skal betales). Forfallsdato for skatte- og avgiftskrav er lovbestemt. (&lt;a href&#x3D;&#x27;http://begrepskatalog/begrep/978e3c52-5f59-11e9-abae-005056821322&#x27;&gt;Begrepsreferanse&lt;/a&gt;)
    /// </summary>
    [DataContract]
        public partial class Kravforfall :  IEquatable<Kravforfall>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kravforfall" /> class.
        /// </summary>
        /// <param name="kravforfallsIdentifikator">kravforfallsIdentifikator (required).</param>
        /// <param name="forfallsdato">forfallsdato (required).</param>
        /// <param name="opprinneligBeloep">opprinneligBeloep (required).</param>
        /// <param name="plassertInnbetaling">innbetaling som er plassert mot et gitt krav med en gitt betalingsfrist.</param>
        /// <param name="plassertMotkrav">motkrav som ble plassert mot en krav i en oppgjøring. (&lt;a href&#x3D;&#x27;https://data.skatteetaten.no/begrep/e05d0c26-8f88-11ea-a408-005056828ed3&#x27;&gt;Begrepsreferanse&lt;/a&gt;).</param>
        /// <param name="gjenstaaendeBeloep">gjenstaaendeBeloep (required).</param>
        /// <param name="betalingsinformasjon">betalingsinformasjon (required).</param>
        /// <param name="plassertUtbetaling">plassertUtbetaling.</param>
        public Kravforfall(string kravforfallsIdentifikator = default(string), DateTime? forfallsdato = default(DateTime?), double? opprinneligBeloep = default(double?), List<InnbetalingPlassertMotKrav> plassertInnbetaling = default(List<InnbetalingPlassertMotKrav>), List<KravPlassertMotKrav> plassertMotkrav = default(List<KravPlassertMotKrav>), double? gjenstaaendeBeloep = default(double?), Betalingsinformasjon betalingsinformasjon = default(Betalingsinformasjon), List<UtbetalingPlassertMotKrav> plassertUtbetaling = default(List<UtbetalingPlassertMotKrav>))
        {
            // to ensure "kravforfallsIdentifikator" is required (not null)
            if (kravforfallsIdentifikator == null)
            {
                throw new InvalidDataException("kravforfallsIdentifikator is a required property for Kravforfall and cannot be null");
            }
            else
            {
                this.KravforfallsIdentifikator = kravforfallsIdentifikator;
            }
            // to ensure "forfallsdato" is required (not null)
            if (forfallsdato == null)
            {
                throw new InvalidDataException("forfallsdato is a required property for Kravforfall and cannot be null");
            }
            else
            {
                this.Forfallsdato = forfallsdato;
            }
            // to ensure "opprinneligBeloep" is required (not null)
            if (opprinneligBeloep == null)
            {
                throw new InvalidDataException("opprinneligBeloep is a required property for Kravforfall and cannot be null");
            }
            else
            {
                this.OpprinneligBeloep = opprinneligBeloep;
            }
            // to ensure "gjenstaaendeBeloep" is required (not null)
            if (gjenstaaendeBeloep == null)
            {
                throw new InvalidDataException("gjenstaaendeBeloep is a required property for Kravforfall and cannot be null");
            }
            else
            {
                this.GjenstaaendeBeloep = gjenstaaendeBeloep;
            }
            // to ensure "betalingsinformasjon" is required (not null)
            if (betalingsinformasjon == null)
            {
                throw new InvalidDataException("betalingsinformasjon is a required property for Kravforfall and cannot be null");
            }
            else
            {
                this.Betalingsinformasjon = betalingsinformasjon;
            }
            this.PlassertInnbetaling = plassertInnbetaling;
            this.PlassertMotkrav = plassertMotkrav;
            this.PlassertUtbetaling = plassertUtbetaling;
        }
        
        /// <summary>
        /// Gets or Sets KravforfallsIdentifikator
        /// </summary>
        [DataMember(Name="kravforfallsIdentifikator", EmitDefaultValue=false)]
        public string KravforfallsIdentifikator { get; set; }

        /// <summary>
        /// Gets or Sets Forfallsdato
        /// </summary>
        [DataMember(Name="forfallsdato", EmitDefaultValue=false)]
        public DateTime? Forfallsdato { get; set; }

        /// <summary>
        /// Gets or Sets OpprinneligBeloep
        /// </summary>
        [DataMember(Name="opprinneligBeloep", EmitDefaultValue=false)]
        public double? OpprinneligBeloep { get; set; }

        /// <summary>
        /// innbetaling som er plassert mot et gitt krav med en gitt betalingsfrist
        /// </summary>
        /// <value>innbetaling som er plassert mot et gitt krav med en gitt betalingsfrist</value>
        [DataMember(Name="plassertInnbetaling", EmitDefaultValue=false)]
        public List<InnbetalingPlassertMotKrav> PlassertInnbetaling { get; set; }

        /// <summary>
        /// motkrav som ble plassert mot en krav i en oppgjøring. (&lt;a href&#x3D;&#x27;https://data.skatteetaten.no/begrep/e05d0c26-8f88-11ea-a408-005056828ed3&#x27;&gt;Begrepsreferanse&lt;/a&gt;)
        /// </summary>
        /// <value>motkrav som ble plassert mot en krav i en oppgjøring. (&lt;a href&#x3D;&#x27;https://data.skatteetaten.no/begrep/e05d0c26-8f88-11ea-a408-005056828ed3&#x27;&gt;Begrepsreferanse&lt;/a&gt;)</value>
        [DataMember(Name="plassertMotkrav", EmitDefaultValue=false)]
        public List<KravPlassertMotKrav> PlassertMotkrav { get; set; }

        /// <summary>
        /// Gets or Sets GjenstaaendeBeloep
        /// </summary>
        [DataMember(Name="gjenstaaendeBeloep", EmitDefaultValue=false)]
        public double? GjenstaaendeBeloep { get; set; }

        /// <summary>
        /// Gets or Sets Betalingsinformasjon
        /// </summary>
        [DataMember(Name="betalingsinformasjon", EmitDefaultValue=false)]
        public Betalingsinformasjon Betalingsinformasjon { get; set; }

        /// <summary>
        /// Gets or Sets PlassertUtbetaling
        /// </summary>
        [DataMember(Name="plassertUtbetaling", EmitDefaultValue=false)]
        public List<UtbetalingPlassertMotKrav> PlassertUtbetaling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kravforfall {\n");
            sb.Append("  KravforfallsIdentifikator: ").Append(KravforfallsIdentifikator).Append("\n");
            sb.Append("  Forfallsdato: ").Append(Forfallsdato).Append("\n");
            sb.Append("  OpprinneligBeloep: ").Append(OpprinneligBeloep).Append("\n");
            sb.Append("  PlassertInnbetaling: ").Append(PlassertInnbetaling).Append("\n");
            sb.Append("  PlassertMotkrav: ").Append(PlassertMotkrav).Append("\n");
            sb.Append("  GjenstaaendeBeloep: ").Append(GjenstaaendeBeloep).Append("\n");
            sb.Append("  Betalingsinformasjon: ").Append(Betalingsinformasjon).Append("\n");
            sb.Append("  PlassertUtbetaling: ").Append(PlassertUtbetaling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kravforfall);
        }

        /// <summary>
        /// Returns true if Kravforfall instances are equal
        /// </summary>
        /// <param name="input">Instance of Kravforfall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kravforfall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KravforfallsIdentifikator == input.KravforfallsIdentifikator ||
                    (this.KravforfallsIdentifikator != null &&
                    this.KravforfallsIdentifikator.Equals(input.KravforfallsIdentifikator))
                ) && 
                (
                    this.Forfallsdato == input.Forfallsdato ||
                    (this.Forfallsdato != null &&
                    this.Forfallsdato.Equals(input.Forfallsdato))
                ) && 
                (
                    this.OpprinneligBeloep == input.OpprinneligBeloep ||
                    (this.OpprinneligBeloep != null &&
                    this.OpprinneligBeloep.Equals(input.OpprinneligBeloep))
                ) && 
                (
                    this.PlassertInnbetaling == input.PlassertInnbetaling ||
                    this.PlassertInnbetaling != null &&
                    input.PlassertInnbetaling != null &&
                    this.PlassertInnbetaling.SequenceEqual(input.PlassertInnbetaling)
                ) && 
                (
                    this.PlassertMotkrav == input.PlassertMotkrav ||
                    this.PlassertMotkrav != null &&
                    input.PlassertMotkrav != null &&
                    this.PlassertMotkrav.SequenceEqual(input.PlassertMotkrav)
                ) && 
                (
                    this.GjenstaaendeBeloep == input.GjenstaaendeBeloep ||
                    (this.GjenstaaendeBeloep != null &&
                    this.GjenstaaendeBeloep.Equals(input.GjenstaaendeBeloep))
                ) && 
                (
                    this.Betalingsinformasjon == input.Betalingsinformasjon ||
                    (this.Betalingsinformasjon != null &&
                    this.Betalingsinformasjon.Equals(input.Betalingsinformasjon))
                ) && 
                (
                    this.PlassertUtbetaling == input.PlassertUtbetaling ||
                    this.PlassertUtbetaling != null &&
                    input.PlassertUtbetaling != null &&
                    this.PlassertUtbetaling.SequenceEqual(input.PlassertUtbetaling)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KravforfallsIdentifikator != null)
                    hashCode = hashCode * 59 + this.KravforfallsIdentifikator.GetHashCode();
                if (this.Forfallsdato != null)
                    hashCode = hashCode * 59 + this.Forfallsdato.GetHashCode();
                if (this.OpprinneligBeloep != null)
                    hashCode = hashCode * 59 + this.OpprinneligBeloep.GetHashCode();
                if (this.PlassertInnbetaling != null)
                    hashCode = hashCode * 59 + this.PlassertInnbetaling.GetHashCode();
                if (this.PlassertMotkrav != null)
                    hashCode = hashCode * 59 + this.PlassertMotkrav.GetHashCode();
                if (this.GjenstaaendeBeloep != null)
                    hashCode = hashCode * 59 + this.GjenstaaendeBeloep.GetHashCode();
                if (this.Betalingsinformasjon != null)
                    hashCode = hashCode * 59 + this.Betalingsinformasjon.GetHashCode();
                if (this.PlassertUtbetaling != null)
                    hashCode = hashCode * 59 + this.PlassertUtbetaling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
