/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilhørende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Kan være skattleggingsperiode; i forskjellige systemer dette er implementert som enten beskrivelse av periode + år (MVA - januar-februar 2022), eller som  dato interval - fraDato, tilDato i Særavgifter,eller  bare år som inntektsår for skatt, eller teknisk termin beskrivelse  (termin 1 2022) osv. I forsøk for å standardisere representasjon av skattleggingsperiode på tvers i form av periodeBeskrivelse + år ble introdusert felten periodeBeskrivelse som skal inneholde en standard tekst som beskriver best perioden (januar-februar, juni, inntektsår, osv.)
    /// </summary>
    [DataContract]
        public partial class Kravperiode :  IEquatable<Kravperiode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kravperiode" /> class.
        /// </summary>
        /// <param name="periodeBeskrivelse">periodeBeskrivelse (required).</param>
        /// <param name="aar">aar.</param>
        /// <param name="fraDato">fraDato.</param>
        /// <param name="tilDato">tilDato.</param>
        /// <param name="terminTekniskNavn">terminTekniskNavn.</param>
        public Kravperiode(MultiSpraakTekst periodeBeskrivelse = default(MultiSpraakTekst), string aar = default(string), DateTime? fraDato = default(DateTime?), DateTime? tilDato = default(DateTime?), string terminTekniskNavn = default(string))
        {
            // to ensure "periodeBeskrivelse" is required (not null)
            if (periodeBeskrivelse == null)
            {
                throw new InvalidDataException("periodeBeskrivelse is a required property for Kravperiode and cannot be null");
            }
            else
            {
                this.PeriodeBeskrivelse = periodeBeskrivelse;
            }
            this.Aar = aar;
            this.FraDato = fraDato;
            this.TilDato = tilDato;
            this.TerminTekniskNavn = terminTekniskNavn;
        }
        
        /// <summary>
        /// Gets or Sets PeriodeBeskrivelse
        /// </summary>
        [DataMember(Name="periodeBeskrivelse", EmitDefaultValue=false)]
        public MultiSpraakTekst PeriodeBeskrivelse { get; set; }

        /// <summary>
        /// Gets or Sets Aar
        /// </summary>
        [DataMember(Name="aar", EmitDefaultValue=false)]
        public string Aar { get; set; }

        /// <summary>
        /// Gets or Sets FraDato
        /// </summary>
        [DataMember(Name="fraDato", EmitDefaultValue=false)]
        public DateTime? FraDato { get; set; }

        /// <summary>
        /// Gets or Sets TilDato
        /// </summary>
        [DataMember(Name="tilDato", EmitDefaultValue=false)]
        public DateTime? TilDato { get; set; }

        /// <summary>
        /// Gets or Sets TerminTekniskNavn
        /// </summary>
        [DataMember(Name="terminTekniskNavn", EmitDefaultValue=false)]
        public string TerminTekniskNavn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kravperiode {\n");
            sb.Append("  PeriodeBeskrivelse: ").Append(PeriodeBeskrivelse).Append("\n");
            sb.Append("  Aar: ").Append(Aar).Append("\n");
            sb.Append("  FraDato: ").Append(FraDato).Append("\n");
            sb.Append("  TilDato: ").Append(TilDato).Append("\n");
            sb.Append("  TerminTekniskNavn: ").Append(TerminTekniskNavn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kravperiode);
        }

        /// <summary>
        /// Returns true if Kravperiode instances are equal
        /// </summary>
        /// <param name="input">Instance of Kravperiode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kravperiode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PeriodeBeskrivelse == input.PeriodeBeskrivelse ||
                    (this.PeriodeBeskrivelse != null &&
                    this.PeriodeBeskrivelse.Equals(input.PeriodeBeskrivelse))
                ) && 
                (
                    this.Aar == input.Aar ||
                    (this.Aar != null &&
                    this.Aar.Equals(input.Aar))
                ) && 
                (
                    this.FraDato == input.FraDato ||
                    (this.FraDato != null &&
                    this.FraDato.Equals(input.FraDato))
                ) && 
                (
                    this.TilDato == input.TilDato ||
                    (this.TilDato != null &&
                    this.TilDato.Equals(input.TilDato))
                ) && 
                (
                    this.TerminTekniskNavn == input.TerminTekniskNavn ||
                    (this.TerminTekniskNavn != null &&
                    this.TerminTekniskNavn.Equals(input.TerminTekniskNavn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PeriodeBeskrivelse != null)
                    hashCode = hashCode * 59 + this.PeriodeBeskrivelse.GetHashCode();
                if (this.Aar != null)
                    hashCode = hashCode * 59 + this.Aar.GetHashCode();
                if (this.FraDato != null)
                    hashCode = hashCode * 59 + this.FraDato.GetHashCode();
                if (this.TilDato != null)
                    hashCode = hashCode * 59 + this.TilDato.GetHashCode();
                if (this.TerminTekniskNavn != null)
                    hashCode = hashCode * 59 + this.TerminTekniskNavn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
