/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilhørende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// oversikt over utbetalinger utført til en part
    /// </summary>
    [DataContract]
        public partial class Utbetalinger :  IEquatable<Utbetalinger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Utbetalinger" /> class.
        /// </summary>
        /// <param name="partIdentifikator">partIdentifikator (required).</param>
        /// <param name="periode">periode (required).</param>
        /// <param name="utbetaling">overføring av penger fra kreditor eller kreditors representant..</param>
        /// <param name="skjermet">skjermet (required).</param>
        public Utbetalinger(string partIdentifikator = default(string), Periode periode = default(Periode), List<Utbetaling> utbetaling = default(List<Utbetaling>), bool? skjermet = default(bool?))
        {
            // to ensure "partIdentifikator" is required (not null)
            if (partIdentifikator == null)
            {
                throw new InvalidDataException("partIdentifikator is a required property for Utbetalinger and cannot be null");
            }
            else
            {
                this.PartIdentifikator = partIdentifikator;
            }
            // to ensure "periode" is required (not null)
            if (periode == null)
            {
                throw new InvalidDataException("periode is a required property for Utbetalinger and cannot be null");
            }
            else
            {
                this.Periode = periode;
            }
            // to ensure "skjermet" is required (not null)
            if (skjermet == null)
            {
                throw new InvalidDataException("skjermet is a required property for Utbetalinger and cannot be null");
            }
            else
            {
                this.Skjermet = skjermet;
            }
            this.Utbetaling = utbetaling;
        }
        
        /// <summary>
        /// Gets or Sets PartIdentifikator
        /// </summary>
        [DataMember(Name="partIdentifikator", EmitDefaultValue=false)]
        public string PartIdentifikator { get; set; }

        /// <summary>
        /// Gets or Sets Periode
        /// </summary>
        [DataMember(Name="periode", EmitDefaultValue=false)]
        public Periode Periode { get; set; }

        /// <summary>
        /// overføring av penger fra kreditor eller kreditors representant.
        /// </summary>
        /// <value>overføring av penger fra kreditor eller kreditors representant.</value>
        [DataMember(Name="utbetaling", EmitDefaultValue=false)]
        public List<Utbetaling> Utbetaling { get; set; }

        /// <summary>
        /// Gets or Sets Skjermet
        /// </summary>
        [DataMember(Name="skjermet", EmitDefaultValue=false)]
        public bool? Skjermet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Utbetalinger {\n");
            sb.Append("  PartIdentifikator: ").Append(PartIdentifikator).Append("\n");
            sb.Append("  Periode: ").Append(Periode).Append("\n");
            sb.Append("  Utbetaling: ").Append(Utbetaling).Append("\n");
            sb.Append("  Skjermet: ").Append(Skjermet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Utbetalinger);
        }

        /// <summary>
        /// Returns true if Utbetalinger instances are equal
        /// </summary>
        /// <param name="input">Instance of Utbetalinger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Utbetalinger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartIdentifikator == input.PartIdentifikator ||
                    (this.PartIdentifikator != null &&
                    this.PartIdentifikator.Equals(input.PartIdentifikator))
                ) && 
                (
                    this.Periode == input.Periode ||
                    (this.Periode != null &&
                    this.Periode.Equals(input.Periode))
                ) && 
                (
                    this.Utbetaling == input.Utbetaling ||
                    this.Utbetaling != null &&
                    input.Utbetaling != null &&
                    this.Utbetaling.SequenceEqual(input.Utbetaling)
                ) && 
                (
                    this.Skjermet == input.Skjermet ||
                    (this.Skjermet != null &&
                    this.Skjermet.Equals(input.Skjermet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartIdentifikator != null)
                    hashCode = hashCode * 59 + this.PartIdentifikator.GetHashCode();
                if (this.Periode != null)
                    hashCode = hashCode * 59 + this.Periode.GetHashCode();
                if (this.Utbetaling != null)
                    hashCode = hashCode * 59 + this.Utbetaling.GetHashCode();
                if (this.Skjermet != null)
                    hashCode = hashCode * 59 + this.Skjermet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
