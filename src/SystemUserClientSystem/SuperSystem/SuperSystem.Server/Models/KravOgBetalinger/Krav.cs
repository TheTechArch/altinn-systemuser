/* 
 * Krav og betalinger API
 *
 * Tjeneste som tilbyr oversikt av krav, innbetalinger og utbetalinger tilhørende en part.
 *
 * OpenAPI spec version: 1.1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Krav (pengekrav) er forpliktelse til å betale eller rett til å motta en bestemt sum penger. (&lt;a href&#x3D;&#x27;http://data.skatteetaten.no/begrep/35c63129-86e6-11e6-a97e-ba992a0501a6&#x27;&gt;Begrepsreferanse&lt;/a&gt;)
    /// </summary>
    [DataContract]
        public partial class Krav :  IEquatable<Krav>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Krav" /> class.
        /// </summary>
        /// <param name="partIdentifikator">partIdentifikator (required).</param>
        /// <param name="kravidentifikator">kravidentifikator (required).</param>
        /// <param name="kravtype">kravtype (required).</param>
        /// <param name="opprinneligBeloep">opprinneligBeloep (required).</param>
        /// <param name="gjenstaaendeBeloep">gjenstaaendeBeloep (required).</param>
        /// <param name="stipulerteRenter">stipulerteRenter.</param>
        /// <param name="kravforfall">frist for å betale krav. En krav kan ha flere forfall(frister), med ulike beløp i vise tilfeller  (f. eks. forskuddsskatt). (required).</param>
        /// <param name="kravbeskrivelse">kravbeskrivelse.</param>
        /// <param name="kravperiode">kravperiode.</param>
        /// <param name="opprettelsesdatoForKrav">opprettelsesdatoForKrav.</param>
        /// <param name="kravgruppe">kravgruppe.</param>
        /// <param name="hovedstolKravidentifikator">hovedstolKravidentifikator.</param>
        /// <param name="fastsettingsmaate">fastsettingsmaate.</param>
        /// <param name="motregningAvKreditkrav">motregningAvKreditkrav.</param>
        public Krav(string partIdentifikator = default(string), string kravidentifikator = default(string), string kravtype = default(string), double? opprinneligBeloep = default(double?), double? gjenstaaendeBeloep = default(double?), double? stipulerteRenter = default(double?), List<Kravforfall> kravforfall = default(List<Kravforfall>), MultiSpraakTekst kravbeskrivelse = default(MultiSpraakTekst), Kravperiode kravperiode = default(Kravperiode), DateTime? opprettelsesdatoForKrav = default(DateTime?), string kravgruppe = default(string), string hovedstolKravidentifikator = default(string), Fastsettingsmaate fastsettingsmaate = default(Fastsettingsmaate), MotregningAvKreditkrav motregningAvKreditkrav = default(MotregningAvKreditkrav))
        {
            // to ensure "partIdentifikator" is required (not null)
            if (partIdentifikator == null)
            {
                throw new InvalidDataException("partIdentifikator is a required property for Krav and cannot be null");
            }
            else
            {
                this.PartIdentifikator = partIdentifikator;
            }
            // to ensure "kravidentifikator" is required (not null)
            if (kravidentifikator == null)
            {
                throw new InvalidDataException("kravidentifikator is a required property for Krav and cannot be null");
            }
            else
            {
                this.Kravidentifikator = kravidentifikator;
            }
            // to ensure "kravtype" is required (not null)
            if (kravtype == null)
            {
                throw new InvalidDataException("kravtype is a required property for Krav and cannot be null");
            }
            else
            {
                this.Kravtype = kravtype;
            }
            // to ensure "opprinneligBeloep" is required (not null)
            if (opprinneligBeloep == null)
            {
                throw new InvalidDataException("opprinneligBeloep is a required property for Krav and cannot be null");
            }
            else
            {
                this.OpprinneligBeloep = opprinneligBeloep;
            }
            // to ensure "gjenstaaendeBeloep" is required (not null)
            if (gjenstaaendeBeloep == null)
            {
                throw new InvalidDataException("gjenstaaendeBeloep is a required property for Krav and cannot be null");
            }
            else
            {
                this.GjenstaaendeBeloep = gjenstaaendeBeloep;
            }
            // to ensure "kravforfall" is required (not null)
            if (kravforfall == null)
            {
                throw new InvalidDataException("kravforfall is a required property for Krav and cannot be null");
            }
            else
            {
                this.Kravforfall = kravforfall;
            }
            this.StipulerteRenter = stipulerteRenter;
            this.Kravbeskrivelse = kravbeskrivelse;
            this.Kravperiode = kravperiode;
            this.OpprettelsesdatoForKrav = opprettelsesdatoForKrav;
            this.Kravgruppe = kravgruppe;
            this.HovedstolKravidentifikator = hovedstolKravidentifikator;
            this.Fastsettingsmaate = fastsettingsmaate;
            this.MotregningAvKreditkrav = motregningAvKreditkrav;
        }
        
        /// <summary>
        /// Gets or Sets PartIdentifikator
        /// </summary>
        [DataMember(Name="partIdentifikator", EmitDefaultValue=false)]
        public string PartIdentifikator { get; set; }

        /// <summary>
        /// Gets or Sets Kravidentifikator
        /// </summary>
        [DataMember(Name="kravidentifikator", EmitDefaultValue=false)]
        public string Kravidentifikator { get; set; }

        /// <summary>
        /// Gets or Sets Kravtype
        /// </summary>
        [DataMember(Name="kravtype", EmitDefaultValue=false)]
        public string Kravtype { get; set; }

        /// <summary>
        /// Gets or Sets OpprinneligBeloep
        /// </summary>
        [DataMember(Name="opprinneligBeloep", EmitDefaultValue=false)]
        public double? OpprinneligBeloep { get; set; }

        /// <summary>
        /// Gets or Sets GjenstaaendeBeloep
        /// </summary>
        [DataMember(Name="gjenstaaendeBeloep", EmitDefaultValue=false)]
        public double? GjenstaaendeBeloep { get; set; }

        /// <summary>
        /// Gets or Sets StipulerteRenter
        /// </summary>
        [DataMember(Name="stipulerteRenter", EmitDefaultValue=false)]
        public double? StipulerteRenter { get; set; }

        /// <summary>
        /// frist for å betale krav. En krav kan ha flere forfall(frister), med ulike beløp i vise tilfeller  (f. eks. forskuddsskatt).
        /// </summary>
        /// <value>frist for å betale krav. En krav kan ha flere forfall(frister), med ulike beløp i vise tilfeller  (f. eks. forskuddsskatt).</value>
        [DataMember(Name="kravforfall", EmitDefaultValue=false)]
        public List<Kravforfall> Kravforfall { get; set; }

        /// <summary>
        /// Gets or Sets Kravbeskrivelse
        /// </summary>
        [DataMember(Name="kravbeskrivelse", EmitDefaultValue=false)]
        public MultiSpraakTekst Kravbeskrivelse { get; set; }

        /// <summary>
        /// Gets or Sets Kravperiode
        /// </summary>
        [DataMember(Name="kravperiode", EmitDefaultValue=false)]
        public Kravperiode Kravperiode { get; set; }

        /// <summary>
        /// Gets or Sets OpprettelsesdatoForKrav
        /// </summary>
        [DataMember(Name="opprettelsesdatoForKrav", EmitDefaultValue=false)]
        public DateTime? OpprettelsesdatoForKrav { get; set; }

        /// <summary>
        /// Gets or Sets Kravgruppe
        /// </summary>
        [DataMember(Name="kravgruppe", EmitDefaultValue=false)]
        public string Kravgruppe { get; set; }

        /// <summary>
        /// Gets or Sets HovedstolKravidentifikator
        /// </summary>
        [DataMember(Name="hovedstolKravidentifikator", EmitDefaultValue=false)]
        public string HovedstolKravidentifikator { get; set; }

        /// <summary>
        /// Gets or Sets Fastsettingsmaate
        /// </summary>
        [DataMember(Name="fastsettingsmaate", EmitDefaultValue=false)]
        public Fastsettingsmaate Fastsettingsmaate { get; set; }

        /// <summary>
        /// Gets or Sets MotregningAvKreditkrav
        /// </summary>
        [DataMember(Name="motregningAvKreditkrav", EmitDefaultValue=false)]
        public MotregningAvKreditkrav MotregningAvKreditkrav { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Krav {\n");
            sb.Append("  PartIdentifikator: ").Append(PartIdentifikator).Append("\n");
            sb.Append("  Kravidentifikator: ").Append(Kravidentifikator).Append("\n");
            sb.Append("  Kravtype: ").Append(Kravtype).Append("\n");
            sb.Append("  OpprinneligBeloep: ").Append(OpprinneligBeloep).Append("\n");
            sb.Append("  GjenstaaendeBeloep: ").Append(GjenstaaendeBeloep).Append("\n");
            sb.Append("  StipulerteRenter: ").Append(StipulerteRenter).Append("\n");
            sb.Append("  Kravforfall: ").Append(Kravforfall).Append("\n");
            sb.Append("  Kravbeskrivelse: ").Append(Kravbeskrivelse).Append("\n");
            sb.Append("  Kravperiode: ").Append(Kravperiode).Append("\n");
            sb.Append("  OpprettelsesdatoForKrav: ").Append(OpprettelsesdatoForKrav).Append("\n");
            sb.Append("  Kravgruppe: ").Append(Kravgruppe).Append("\n");
            sb.Append("  HovedstolKravidentifikator: ").Append(HovedstolKravidentifikator).Append("\n");
            sb.Append("  Fastsettingsmaate: ").Append(Fastsettingsmaate).Append("\n");
            sb.Append("  MotregningAvKreditkrav: ").Append(MotregningAvKreditkrav).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Krav);
        }

        /// <summary>
        /// Returns true if Krav instances are equal
        /// </summary>
        /// <param name="input">Instance of Krav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Krav input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartIdentifikator == input.PartIdentifikator ||
                    (this.PartIdentifikator != null &&
                    this.PartIdentifikator.Equals(input.PartIdentifikator))
                ) && 
                (
                    this.Kravidentifikator == input.Kravidentifikator ||
                    (this.Kravidentifikator != null &&
                    this.Kravidentifikator.Equals(input.Kravidentifikator))
                ) && 
                (
                    this.Kravtype == input.Kravtype ||
                    (this.Kravtype != null &&
                    this.Kravtype.Equals(input.Kravtype))
                ) && 
                (
                    this.OpprinneligBeloep == input.OpprinneligBeloep ||
                    (this.OpprinneligBeloep != null &&
                    this.OpprinneligBeloep.Equals(input.OpprinneligBeloep))
                ) && 
                (
                    this.GjenstaaendeBeloep == input.GjenstaaendeBeloep ||
                    (this.GjenstaaendeBeloep != null &&
                    this.GjenstaaendeBeloep.Equals(input.GjenstaaendeBeloep))
                ) && 
                (
                    this.StipulerteRenter == input.StipulerteRenter ||
                    (this.StipulerteRenter != null &&
                    this.StipulerteRenter.Equals(input.StipulerteRenter))
                ) && 
                (
                    this.Kravforfall == input.Kravforfall ||
                    this.Kravforfall != null &&
                    input.Kravforfall != null &&
                    this.Kravforfall.SequenceEqual(input.Kravforfall)
                ) && 
                (
                    this.Kravbeskrivelse == input.Kravbeskrivelse ||
                    (this.Kravbeskrivelse != null &&
                    this.Kravbeskrivelse.Equals(input.Kravbeskrivelse))
                ) && 
                (
                    this.Kravperiode == input.Kravperiode ||
                    (this.Kravperiode != null &&
                    this.Kravperiode.Equals(input.Kravperiode))
                ) && 
                (
                    this.OpprettelsesdatoForKrav == input.OpprettelsesdatoForKrav ||
                    (this.OpprettelsesdatoForKrav != null &&
                    this.OpprettelsesdatoForKrav.Equals(input.OpprettelsesdatoForKrav))
                ) && 
                (
                    this.Kravgruppe == input.Kravgruppe ||
                    (this.Kravgruppe != null &&
                    this.Kravgruppe.Equals(input.Kravgruppe))
                ) && 
                (
                    this.HovedstolKravidentifikator == input.HovedstolKravidentifikator ||
                    (this.HovedstolKravidentifikator != null &&
                    this.HovedstolKravidentifikator.Equals(input.HovedstolKravidentifikator))
                ) && 
                (
                    this.Fastsettingsmaate == input.Fastsettingsmaate ||
                    (this.Fastsettingsmaate != null &&
                    this.Fastsettingsmaate.Equals(input.Fastsettingsmaate))
                ) && 
                (
                    this.MotregningAvKreditkrav == input.MotregningAvKreditkrav ||
                    (this.MotregningAvKreditkrav != null &&
                    this.MotregningAvKreditkrav.Equals(input.MotregningAvKreditkrav))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartIdentifikator != null)
                    hashCode = hashCode * 59 + this.PartIdentifikator.GetHashCode();
                if (this.Kravidentifikator != null)
                    hashCode = hashCode * 59 + this.Kravidentifikator.GetHashCode();
                if (this.Kravtype != null)
                    hashCode = hashCode * 59 + this.Kravtype.GetHashCode();
                if (this.OpprinneligBeloep != null)
                    hashCode = hashCode * 59 + this.OpprinneligBeloep.GetHashCode();
                if (this.GjenstaaendeBeloep != null)
                    hashCode = hashCode * 59 + this.GjenstaaendeBeloep.GetHashCode();
                if (this.StipulerteRenter != null)
                    hashCode = hashCode * 59 + this.StipulerteRenter.GetHashCode();
                if (this.Kravforfall != null)
                    hashCode = hashCode * 59 + this.Kravforfall.GetHashCode();
                if (this.Kravbeskrivelse != null)
                    hashCode = hashCode * 59 + this.Kravbeskrivelse.GetHashCode();
                if (this.Kravperiode != null)
                    hashCode = hashCode * 59 + this.Kravperiode.GetHashCode();
                if (this.OpprettelsesdatoForKrav != null)
                    hashCode = hashCode * 59 + this.OpprettelsesdatoForKrav.GetHashCode();
                if (this.Kravgruppe != null)
                    hashCode = hashCode * 59 + this.Kravgruppe.GetHashCode();
                if (this.HovedstolKravidentifikator != null)
                    hashCode = hashCode * 59 + this.HovedstolKravidentifikator.GetHashCode();
                if (this.Fastsettingsmaate != null)
                    hashCode = hashCode * 59 + this.Fastsettingsmaate.GetHashCode();
                if (this.MotregningAvKreditkrav != null)
                    hashCode = hashCode * 59 + this.MotregningAvKreditkrav.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
